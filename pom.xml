<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.0.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>cj.geochat</groupId>
    <artifactId>cj-geochat-eureka-server</artifactId>
    <version>${project.version}</version>
    <name>cj-geochat-eureka-server</name>
    <description>cj-geochat-eureka-server</description>
    <properties>
        <java.version>17</java.version>
        <project.version>0.0.1-SNAPSHOT</project.version>
        <spring-cloud.version>2022.0.2</spring-cloud.version>
    </properties>
    <!--用于根据环境切换属性。如部署时：deploy -P release此时会选择配置的release环境的属性-->
    <profiles>
        <profile>
            <id>release</id>
            <properties>
                <project.version>0.0.1</project.version>
            </properties>
        </profile>
    </profiles>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <!--
                    Docker-Maven-Plugin 使用tcp连接docker desktop
                    在mac m1|m2上该插件不兼容（在mac备忘录搜该关键字)
                    该插件默认是通过mac本地的UNIX-CONNECT:/var/run/docker.sock来连接到docker desktop进行发布镜像，
                    但由于不兼容mac arm芯片，因此会报调用操作系统核心库错误，正确做法是改为tcp方式连接到docker desktop。
                    1、启动一个容器目的是将docker desktop当成一个tcp服务器，并提供容器服务
                    docker run -d 双扛name docker-port -v /var/run/docker.sock:/var/run/docker.sock -p 2375:2375 bobrik/socat TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock
                    2、在Docker-Maven-Plugin中配置dockerHost指定第一步配置的tcp服务器
                    <dockerHost>http://localhost:2375</dockerHost>
                -->
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.2</version>
                <!--将插件绑定在某个phase执行-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <!--用户只需执行mvn package ，就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--docker宿主机的ip，要为docker开通tcp访问才有效-->
                    <dockerHost>http://localhost:2375</dockerHost>
                    <!--指定生成的镜像名,这里是我们的作者名+项目名+版本号-->
                    <imageName>geochat/eureka:${project.version}</imageName>
                    <!--指定标签 这里指定的是镜像的版本，我们默认版本是latest-->
                    <!--版本最好不要用imageTags，因为imageName中如果没有指定版本，
                    而imageTags中指定的版本不是latest的话，同时会生成多个版本，
                    其中一定是imageName产生的latest，因此版本最好在imageName中指定-->
<!--                    <imageTags>-->
<!--                        <imageTag>${project.version}</imageTag>-->
<!--                    </imageTags>-->
                    <!--指定基础镜像jdk1.8-->
                    <baseImage>java:17</baseImage>
                    <!--
                    镜像制作人本人信息-->
                    <maintainer>carocean.jofers@outlook.com</maintainer>
                    <!--切换到ROOT目录-->
                    <workdir>/geochat</workdir>
                    <!--查看我们的java版本-->
                    <cmd>["java", "-version"]</cmd>
                    <!--${project.build.finalName}.jar是打包后生成的jar包的名字-->
                    <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>
                    <exposes>
                        <!--（！！！）这个暴露接口也要变化 -->
                        <expose>8761</expose>
                    </exposes>
                    <!--docker的环境变量模拟在docker run 命令于中输入 -e 变量名-->
                    <!--此处定义的值是dockerfile运行时的默认值，在用docker-compose或run启动时可通过-e参数覆盖掉-->
                    <env>
                        <geochat.spring.profiles.active>prod</geochat.spring.profiles.active>
                        <geochat.register-with-eureka>false</geochat.register-with-eureka>
                        <geochat.fetch-registry>false</geochat.fetch-registry>
                        <geochat.EUREKA_SERVER_URL>http://localhost:8761/eureka/</geochat.EUREKA_SERVER_URL>
                        <geochat.hostname>localhost</geochat.hostname>
                    </env>
                    <!--指定远程 docker api地址 远程仓库-->
                    <!--                    <dockerHost>http://localhost:2375</dockerHost>-->
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/geochat</targetPath>
                            <!--jar 包所在的路径  此处配置的 即对应 target 目录-->
                            <directory>${project.build.directory}</directory>
                            <!--用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <distributionManagement>
        <repository>
            <id>geochat</id>
            <name>geochat</name>
            <url>http://localhost:65000/repository/geochat/</url>
        </repository>
        <snapshotRepository>
            <id>geochat-snapshots</id>
            <name>geochat snapshots</name>
            <url>http://localhost:65000/repository/geochat-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>
    <repositories>
        <repository>
            <id>geochat</id>
            <name>geochat</name>
            <url>http://localhost:65000/repository/geochat/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </snapshots>
        </repository>
        <repository>
            <id>geochat-snapshots</id>
            <name>geochat-snapshots</name>
            <url>http://localhost:65000/repository/geochat-snapshots/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </snapshots>
        </repository>
    </repositories>
</project>
